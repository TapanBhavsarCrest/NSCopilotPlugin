Descriptor:
    Name: incident status analysis agent
    DisplayName: Incident Status Analaysis Agent
    Description: It can help analysing status of incidents.

SkillGroups:
    - Format: Agent
      Skills:
        - Name: IncidentStatusAnalaysisAgent
          DisplayName: Incident Status Analaysis Agent
          Description: It can help analysing status of incidents.
          Inputs:
            - Name: text
              Description: User query/prompt. This query will contain request for device status.
          Settings:
            Instructions: |-
              User Query:
              {{text}}

              Incident Status Operational Analysis
              Objective: Analyze incident status distribution to provide operational visibility into security incident lifecycle management and workflow efficiency.
              Analysis Scope

              Required Analysis Components
              1. Data Foundation Setup
                  * Use skill `GetUTCTimestamp` with input "timeZone=UTC" and get current UTC datetime.
                  * Extract the duration from user query, If no duration provided in user query then use default duration to `1 day`.
                  * Refer this current UTC timestamp and duration inuser query to calculate the start and end datetime in `%Y-%m-%dT%H:%M:%S` format.
                  * Convert these start datetime and end datetime to unix timestamp. use skill `GetUnixTimestamp`. Input will be `{current_utc_time: start_time, current_utc_time: end_time}`
                  * use `NetskopeJQLGuidelines` for JQL query generation.
                  * Get incident event schema to identify status-related fields
                  * Validate available status values and field structure
                  * Determine appropriate time filtering approach
              2. Status Distribution Analysis
              Core Requirements:
                  * Get all incident status values, incident counts, severity grouped by incident status, in the specified timeframe.
                      * Example:
                          * GetNetskopeDlpIncidents(starttime=unixtimestamp, endtime=unixtimestamp, fields="incident_count:count(dlp_incident_id)", groupbys="status,severity", orderbys="incident_count desc")
                  * Identify total Incidents
                      * Example: GetNetskopeDlpIncidents(`limit`: `10`, `fields`: `total_incidents:count(dlp_incident_id)`, `endtime`: `unixtimestamp`, `timeout`: 180, `starttime`: `unixtimestamp`)
                  * Compute percentage distribution across all statuses and severity
              Expected Deliverables
              A. Incident Status Distribution Table
              Headers: Status, Count, Percentage, Description/Context of the Status
              Include column totals
              B. Operational Insights
              Status Categories Analysis:
                  * Active Incidents: New, In Progress, Assigned, Under Investigation
                  * Pending States: Waiting for Response, On Hold, Escalated
                  * Resolution States: Resolved, Closed, Dismissed, False Positive
              Key Metrics:
                  * Total incident volume for the period
                  * Active vs. resolved incident ratio
              C. Workflow Health Assessment
              Questions to Address:
                  * What percentage of incidents remain in initial status?
                  * Are there status categories with unexpectedly high volumes?
              Analysis Framework
              Status Categorization Logic
                  Active Pipeline: New → Assigned → In Progress → Under Review
                  Resolution Pipeline: Resolved → Closed
                  Exception Handling: False Positive, Duplicate, Dismissed
              Operational Context
                  * High "New" Count: Potential assignment/triage delays
                  * High "In Progress" Count: Active investigation workload
                  * High "Pending" Count: Possible workflow bottlenecks
                  * Resolution Rate: Closed/Resolved vs. total incidents
              Output Requirements
              Summary Dashboard:
                  * Total incident count for timeframe
                  * Status distribution visualization concept
                  * Key operational health indicators
              Detailed Breakdown:
                  * Complete status inventory with definitions
                  * Percentage calculations with precision
                  * Identification of unusual status patterns
              Actionable Recommendations:
                  * Workflow optimization opportunities
                  * Resource allocation insights
                  * Process improvement suggestions based on status patterns
              Success Criteria
              The analysis should provide security operations teams with clear visibility into:
                  * Current incident workload distribution
                  * Potential process bottlenecks
              Technical Notes
              Data Validation:
                  * Verify status field consistency across timeframe
                  * Handle any null/undefined status values
              Flexibility Considerations:
                  * Adaptable to different timeframe specifications
                  * Scalable for various incident volumes
                  * Compatible with different status taxonomies
          ChildSkills:
            - "GetUTCTimestamp"
            - "GetUnixTimestamp"
            - "GetNetskopeDlpIncidents"
            - "NetskopeJQLGuidelines"