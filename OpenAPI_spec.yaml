openapi: 3.0.1
info:
  description: Netskope API documentation
  version: 1.0.0
  title: Netskope API
paths:
  /api/v2/events/datasearch/incident:
    x-netskope-params:
      serviceConfig: queryservice
      version: 2
      customerFacing: true
      apiGroup: incident
    get:
      summary: Export DLP incidents generated by Netskope
      description: |
        Get DLP incidents generated by Netskope, one page at a time.
        The incident attribute definition is available in the linked documentation.
        as starttime and endtime only accept Unix timestamp you need to change relative time such as last 7 days, last 6 month, last couple of years into unix timestamp. and pass those to respective paramenters.
      operationId: exportDlpIncidents
      tags:
        - DLP Incident Export
      parameters:
        - name: limit
          in: query
          required: true
          description: Max number of records to retrieve
          schema:
            type: integer
            default: 10000
        - name: timeout
          in: query
          required: True
          description: Query timeout, in seconds
          schema:
            type: integer
            default: 180
        - name: starttime
          in: query
          required: true
          description: Unix timestamp of start time period of alerts
          schema:
            type: integer
            minimum: 0
        - name: endtime
          in: query
          required: true
          description: Unix timestamp of end time period of alerts
          schema:
            type: integer
            minimum: 0
        - name: offset
          in: query
          required: true
          description: Used to shift the window of alerts if limit is reached
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: sublimit
          in: query
          required: false
          description: Number of results to limit the sub-aggregations by
          schema:
            type: integer
        - name: groupbys
          in: query
          required: false
          description: Fields to aggregate on
          schema:
            items:
              type: string
            type: array
        - name: subgroupbys
          in: query
          required: false
          description: Secondary fields to aggregate on
          schema:
            items:
              type: string
            type: array
        - name: orderbys
          in: query
          required: false
          description: Fields to sort the results by
          schema:
            items:
              type: string
            type: array
        - name: fields
          in: query
          required: false
          description: Names of the columns whose values want to be retrieved in results.
          schema:
            type: integer
        - name: query
          in: query
          required: false
          description: |
            This parameter allows for the use of a sophisticated query language to filter alerts based on various application-specific fields. Each query consists of terms, operators, and can include grouping and Boolean logic:

            - **Field**: Specifies an application field such as `user` or `app`.
            - **Operator**: Can be `eq` (equal to), `neq` (not equal to), `like` (pattern matching for strings), `gt` (greater than), `gte` (greater than or equal to), `lt` (less than), or `lte` (less than or equal to).
            - **Value**: The value to match against the field, which can be a string or a numeric value. The *Value* **must be always enclosed in single quotes**, example '5.0', 'abcd', 'new'.
            - **Format** : (<Field><space><Operator><space>'<Value>')

            Queries can also be constructed with ranges like `timestamp from 1607990400 to 1610158997` (in Epoch Time). Boolean operators (`and`, `or`, `not`) can be used to combine multiple conditions. Parentheses can be used to specify the order of operations and group conditions.

            Consider the below mentioned queryable fields which can be used to filter response:
            - `user` : To filter based on User ID or email
            - `app`: To filter based on name of the application
          schema:
            type: string
          examples:
            example1:
              value: "query=user like 'sample.user@example.com'"
            example2:
              value: "query=user like 'sample.user2@example.com'"
            example3:
              value: "query=app like 'google.com' and user like 'sample.user@example.com'"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                        subject:
                          type: string
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string


  /api/v2/events/datasearch/alert:
    x-netskope-params:
      serviceConfig: queryservice
      version: 2
      customerFacing: true
      apiGroup: alert
    get:
      summary: Get alerts generated by Netskope
      description: |
        Get a list of alerts generated by Netskope. You can filter by timeperiod, alert type, acknowledged, or advanced query parameters.
        This endpoint allows you to check all the Netskope Alerts in your tenant.
        As starttime and endtime only accept Unix timestamp you need to change relative time such as last 7 days, last 6 month, last couple of years into unix timestamp. and pass those to respective paramenters.
        #ExamplePrompts Show me all the Netskope Alerts for last 90 days for DLP.
        #ExamplePrompts Show me all the Netskope Alerts for last 3 days.
        #ExamplePrompts Show me the Netskope Alerts for Monday Oct 23 UTC for uba.
        #ExamplePrompts Show me all Netskope Malware Alerts for the last week.
        #ExamplePrompts Show me all Netskope Compromised Credential Alerts for the last 3 days.
        #ExamplePrompts Show me all Netskope Compromised Credential Alerts for last 24 hours.
        #ExamplePrompts Show me all Netskope Compromised Credential Alerts for last 24 hours with user exampleUser@netskope.com.
      parameters:
        - name: limit
          in: query
          required: true
          description: Max number of records to retrieve
          schema:
            type: integer
            default: 10000
        - name: timeout
          in: query
          required: True
          description: Query timeout, in seconds
          schema:
            type: integer
            default: 180
        - name: starttime
          in: query
          required: true
          description: Unix timestamp of start time period of alerts
          schema:
            type: integer
            minimum: 0
        - name: endtime
          in: query
          required: true
          description: Unix timestamp of end time period of alerts
          schema:
            type: integer
            minimum: 0
        - name: offset
          in: query
          required: true
          description: Used to shift the window of alerts if limit is reached
          schema:
            type: integer
            minimum: 0
            default: 0
        - name: sublimit
          in: query
          required: false
          description: Number of results to limit the sub-aggregations by
          schema:
            type: integer
        - name: groupbys
          in: query
          required: false
          description: Fields to aggregate on
          schema:
            items:
              type: string
            type: array
        - name: subgroupbys
          in: query
          required: false
          description: Secondary fields to aggregate on
          schema:
            items:
              type: string
            type: array
        - name: orderbys
          in: query
          required: false
          description: Fields to sort the results by
          schema:
            items:
              type: string
            type: array
        - name: fields
          in: query
          required: false
          description: Names of the columns whose values want to be retrieved in results.
          schema:
            type: integer
        - name: query
          in: query
          required: false
          description: |
            This parameter allows for the use of a sophisticated query language to filter alerts based on various application-specific fields. Each query consists of terms, operators, and can include grouping and Boolean logic:

            - **Field**: Specifies an application field such as `user`, `url`, or `app`.
            - **Operator**: Can be `eq` (equal to), `neq` (not equal to), `like` (pattern matching for strings), `gt` (greater than), `gte` (greater than or equal to), `lt` (less than), or `lte` (less than or equal to).
            - **Value**: The value to match against the field, which can be a string or a numeric value. The *Value* **must be always enclosed in single quotes**, example '5.0', 'abcd', 'new'.
            - **Format** : (<Field><space><Operator><space>'<Value>')

            Queries can also be constructed with ranges like `timestamp from 1607990400 to 1610158997` (in Epoch Time). Boolean operators (`and`, `or`, `not`) can be used to combine multiple conditions. Parentheses can be used to specify the order of operations and group conditions.

            Consider the below mentioned queryable fields which can be used to filter response:
            - `userkey` : To filter based on User ID or email
            - `alert_name`: To filter based on name of the alert
            - `url` : To filter based on the Url for which alert is triggered.
            **MUST MAKE SURE:
            - When needed You must Use `type` and `acked` from the parameters rather than passing it in the query.
          schema:
            type: string
          examples:
            example1:
              value: "query=user like 'sample.user@example.com'"
            example2:
              value: "query=user like 'sample.user2@example.com'"
            example3:
              value: "query=app like 'google.com' and user like 'sample.user@example.com'"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: integer
                    enum:
                      - 0
                      - 1
                    default: 1
                  result:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: integer
                        alert_name:
                          type: string
                        url:
                          type: string
                      additionalProperties: false
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400'
      tags:
        - events
  /api/v2/incidents/uba/getuci:
    post:
      summary: Get a confidence index or UCI score for a user.
      description: |
        Get confidence index or UCI score for a user.

        for that, we need to make json payload as follows:
        {"user": "<user name/id/email>", "fromTime": <from time in epoch>, "capPerUser": <cap per user>}
        from above structure the playload must contains user and capPerUser.

        default value for,
          fromTime is 0
          capPerUser is 1
        You can consider these if not provided.

        EXAMPLE:
        {"user": "aditya.khetan@crestdatasys.com", "fromTime": 0, "capPerUser": 1}
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsersUciRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ConfidenceTimeSeries"
          description: successful request
        '400':
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/ErrorResponse"
          description: invalid request
      tags:
      - incidents
components:
  schemas:
    '200':
      description: successful operation
      type: object
      properties:
        status:
          type: string
          example: success
    '400':
      description: Bad request response
      type: object
      properties:
        message:
          type: string
          example: Bad request
    '401':
      description: Bad request response
      type: object
      properties:
        message:
          type: string
          example: Bad request
    '403':
      description: Bad request response
      type: object
      properties:
        message:
          type: string
          example: Bad request
    '404':
      description: Bad request response
      type: object
      properties:
        message:
          type: string
          example: Bad request
    '405':
      description: Method not allowed response
      type: object
      properties:
        message:
          type: string
          example: Method not allowed
    '408':
      description: Timeout response
      type: object
      properties:
        message:
          type: string
          example: Request timed out
    '413':
      description: Payload too large
      type: object
      properties:
        message:
          type: string
          example: Payload too long
    '414':
      description: URI too long
      type: object
      properties:
        message:
          type: string
          example: URI too long
    '429':
      description: Too many requests response
      type: object
      properties:
        message:
          type: string
          example: Too many requests
    limit:
      type: integer
      minimum: 1
      maximum: 100
    offset:
      type: integer
      minimum: 0
      default: 0
    orderby:
      type: string
      enum:
        - asc
        - desc
      default: desc
    CCL:
      type: string
      enum:
        - excellent
        - high
        - medium
        - low
        - poor
    BadRequest:
      allOf:
        - type: object
          properties:
            success:
              type: boolean
              default: false
            msg:
              type: string
              default: Bad request error
    ServerError:
      allOf:
        - type: object
          properties:
            success:
              type: boolean
              default: false
            msg:
              type: string
              default: Backend error occurred
    Unauthorized:
      allOf:
        - type: object
          properties:
            success:
              type: boolean
              default: false
            msg:
              type: string
              default: Unauthorized
    sortorder:
      type: string
      enum:
        - desc
        - asc
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: user facing message for this error
    Confidence:
      type: object
      properties:
        start:
          type: integer
          format: int64
        confidenceScore:
          type: integer
          format: int32
    ConfidenceTimeSeries:
      type: object
      properties:
        userId:
          type: string
        confidences:
          type: array
          items:
            $ref: '#/components/schemas/Confidence'
    Sort:
      type: array
      items:
        type: object
        properties:
          column:
            type: string
          sort_order:
            type: string
            enum:
              - asc
              - desc
        required:
          - properties
          - sort_order
    SortColumn:
      type: object
      properties:
        column:
          type: string
        sort_order:
          $ref: '#/components/schemas/SortOrder'
      required:
        - column
        - sort_order
    SortOrder:
      type: string
      enum:
        - asc
        - desc
    GetResultsRequestBody:
      type: object
      properties:
        offset:
          type: integer
          description: pagination offset
          default: 0
        limit:
          type: integer
          description: pagination pagesize
          minimum: 1
          maximum: 500
        sort:
          $ref: '#/components/schemas/Sort'
        timestamp:
          type: integer
          description: epoch time,
        filters:
          $ref: '#/components/schemas/Filters'
        fields:
          type: array
          items:
            type: string
          description: required fields in the JSON response, if empty, all fields are returned.
      required:
        - timestamp
        - sort
        - limit
        - offset
    Status:
      type: string
      enum:
        - Failed
        - Passed
        - Unknown
    StatusFilterValues:
      type: object
      properties:
        values:
          type: array
          items:
            $ref: '#/components/schemas/Status'
        operator:
          type: string
          $ref: '#/components/schemas/FilterOperator'
    MutedFilterValues:
      type: object
      properties:
        values:
          type: array
          items:
            type: boolean
            enum:
              - true
              - false
        operator:
          type: string
          $ref: '#/components/schemas/FilterOperator'
    SeverityFilterValues:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
            enum:
              - Critical
              - High
              - Medium
              - Low
        operator:
          type: string
          $ref: '#/components/schemas/FilterOperator'
    Notification:
      type: object
      properties:
        alertId:
          type: integer
          format: int64
        receiverId:
          type: integer
          format: int64
        receiverType:
          type: string
          description: type of the receiver
          enum:
            - email
            - webhook
        receiverName:
          type: string
          description: name of the receiver
        status:
          type: string
          description: status of notification
          enum:
            - pending
            - processed
            - error
        notifyAt:
          type: integer
          format: int64
          description: timestamp when notification is sent
    Filters:
      type: object
      properties:
        instance_id:
          $ref: '#/components/schemas/FilterValues'
        instance_name:
          $ref: '#/components/schemas/FilterValues'
        resource_type:
          $ref: '#/components/schemas/FilterValues'
        region_name:
          $ref: '#/components/schemas/FilterValues'
        region_id:
          $ref: '#/components/schemas/FilterValues'
        resource_id:
          $ref: '#/components/schemas/FilterValues'
        resource_name:
          $ref: '#/components/schemas/FilterValues'
        tags:
          $ref: '#/components/schemas/FilterValues'
        app:
          $ref: '#/components/schemas/FilterValues'
        app_suite:
          $ref: '#/components/schemas/FilterValues'
        app_category:
          $ref: '#/components/schemas/FilterValues'
        status:
          $ref: '#/components/schemas/StatusFilterValues'
        muted:
          $ref: '#/components/schemas/MutedFilterValues'
        rule_name:
          $ref: '#/components/schemas/FilterValues'
        compliance_standards:
          $ref: '#/components/schemas/FilterValues'
        policies:
          $ref: '#/components/schemas/FilterValues'
        severity:
          $ref: '#/components/schemas/SeverityFilterValues'
        netskope_instance_name:
          $ref: '#/components/schemas/FilterValues'
    FilterOperator:
      type: string
      enum:
        - equal
        - like
    FilterValues:
      type: object
      properties:
        values:
          type: array
          items:
            type: string
        operator:
          type: string
          $ref: '#/components/schemas/FilterOperator'
    AlertCategory:
      type: string
      enum:
        - network
        - platform
        - private app
    AlertType:
      type: string
      enum:
        - tunnel down
        - tunnel flapping
        - tunnel throughput
        - service status
        - publisher resource consumption
    AlertSeverity:
      type: string
      description: alert severity
      enum:
        - info
        - low
        - medium
        - high
        - critical
    AlertStatus:
      type: string
      enum:
        - open
        - closed
        - expired
        - obsolet
    Alert:
      type: object
      properties:
        id:
          type: string
        alertRule:
          type: object
          properties:
            id:
              type: integer
              description: alert rule id
            name:
              type: string
              description: alert rule name
        notifications:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
        alertCategory:
          $ref: '#/components/schemas/AlertCategory'
        alertType:
          $ref: '#/components/schemas/AlertType'
        condition:
          type: string
          description: condition by which the alert was triggered
        severity:
          $ref: '#/components/schemas/AlertSeverity'
        status:
          $ref: '#/components/schemas/AlertStatus'
        impactType:
          type: string
          description: type of the entity impacted by the alert
        impacts:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                description: id of the impacted entity
              name:
                type: string
                description: name of the impacted entity
        openTime:
          type: integer
          format: int64
          description: alert start time in unix time in second
        lastUpdateTime:
          type: integer
          format: int64
          description: alert's last update time in unix time in second
        closeTime:
          type: integer
          format: int64
          description: alert close time in unix time in second
    UsersUciRequest:
      properties:
        capPerUser:
          description: >-
            It is an optional parameter. The default value is 7. Be notice the
            parameter with the size of users will affects the performance of
            the API
          format: int32
          type: integer
        fromTime:
          format: int64
          type: integer
        users:
          description: a list of users. The length of the list should not bigger than 512
          items:
            type: string
          type: array
      required:
        - users
        - fromTime
      type: object
